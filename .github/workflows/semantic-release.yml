name: Create Release Tag

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

jobs:
  update-coverage:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    name: Update Coverage Badge
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Generate token from GitHub App
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.SEMANTIC_RELEASE_APP_ID }}
          private_key: ${{ secrets.SEMANTIC_RELEASE_APP_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: |
          go test -v -coverprofile=coverage.out -covermode=atomic ./...
          echo "Coverage report generated"

      - name: Calculate coverage percentage
        id: coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Current coverage: ${COVERAGE}%"

      - name: Update README with coverage badge
        run: |
          # Determine badge color based on coverage
          if (( $(echo "${{ steps.coverage.outputs.coverage }} >= 80" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "${{ steps.coverage.outputs.coverage }} >= 60" | bc -l) )); then
            COLOR="green"
          elif (( $(echo "${{ steps.coverage.outputs.coverage }} >= 40" | bc -l) )); then
            COLOR="yellow"
          else
            COLOR="red"
          fi

          # Update the coverage badge in README.md
          sed -i "s/!\[Coverage\](https:\/\/img\.shields\.io\/badge\/coverage-[0-9.]*%25-[a-z]*)/![Coverage](https:\/\/img.shields.io\/badge\/coverage-${{ steps.coverage.outputs.coverage }}%25-$COLOR)/" README.md

          # Update the coverage percentage in the coverage section
          sed -i "s/\*\*Overall Coverage: [0-9.]*%\*\*/\*\*Overall Coverage: ${{ steps.coverage.outputs.coverage }}%\*\*/" README.md

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git diff --quiet && git diff --staged --quiet || git commit -m "docs: update coverage badge to ${{ steps.coverage.outputs.coverage }}%"
          git push

  release:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    name: Apply Semantic Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Generate token from GitHub App
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.SEMANTIC_RELEASE_APP_ID }}
          private_key: ${{ secrets.SEMANTIC_RELEASE_APP_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Run npm clean install for local dependencies
        run: npm ci

      - name: Install semantic-release globally
        run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Setup Git user
        run: |
          git config user.name "semantic-release[bot]"
          git config user.email "semantic-release[bot]@users.noreply.github.com"

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          NODE_ENV: production
        run: npx semantic-release
